logging:
  version: 1
  disable_existing_loggers: False
  root:
    handlers:
      - default
      - console
    level: DEBUG
  loggers:
    idp:
      level: DEBUG
  handlers:
    default:
      class: logging.FileHandler
      filename: 'debug_expl.log'
      formatter: default
    console:
      class: logging.StreamHandler
      stream: 'ext://sys.stdout'
      formatter: default
  formatters:
    default:
      format: '%(asctime)s %(name)s %(levelname)s %(message)s'

domain: &domain 127.0.0.1
port: &port 4000

base_url: &base "https://{domain}:{port}"

http_params:
  verify: False

keydefs: &keydef
  -
    "type": "RSA"
    "key": ''
    "use": ["sig"]
  -
    "type": "EC"
    "crv": "P-256"
    "use": ["sig"]

rp_keys:
    private_path: 'private/jwks_expl.json'
    key_defs: *keydef
    public_path: 'static/jwks_expl.json'
    # this will create the jwks files if they absent
    read_only: False
    uri_path: 'static/jwks_expl.json'

# information used when registering the client, this may be the same for all OPs

client_preferences: &prefs
    application_name: rphandler
    application_type: web
    contacts: [ops@example.com]
    response_types: [code]
    scope: [openid, profile, email, address, phone]
    token_endpoint_auth_method: [private_key_jwt]

services: &services
  discovery:
    class: fedservice.rp.provider_info_discovery.FedProviderInfoDiscovery
    kwargs: {}
  registration:
    class: fedservice.rp.registration.FedRegistration
    kwargs: {}
  authorization:
    class: oidcservice.oidc.authorization.Authorization
    kwargs: {}
  accesstoken:
    class: oidcservice.oidc.access_token.AccessToken
    kwargs: {}
  userinfo:
    class: oidcservice.oidc.userinfo.UserInfo
    kwargs: {}
  end_session:
    class: oidcservice.oidc.end_session.EndSession
    kwargs: {}

federation: &federation
  entity_id: "https://{domain}:{port}/{{}}"
  keys:
    private_path: 'private/fed_keys_expl.json'
    key_defs: *keydef
    public_path: 'static/fed_keys_expl.json'
    read_only: false
  authority_hints: authority_hints.json
  trusted_roots: trusted_roots.json
  priority: []
  entity_type: openid_relying_party
  opponent_entity_type: openid_provider
  registration_type: explicit
  db_conf:
    abstract_storage_cls: oidcmsg.storage.extension.LabeledAbstractStorage
    keyjar:
      handler: oidcmsg.storage.abfile.AbstractFileSystem
      fdir: storage/expl/fed/{issuer}/keyjar
      key_conv: oidcmsg.storage.converter.QPKey
      value_conv: cryptojwt.serialize.item.KeyIssuer
      label: 'x'
    default:
      handler: oidcmsg.storage.abfile.AbstractFileSystem
      fdir: storage/expl/fed/{issuer}
      key_conv: oidcmsg.storage.converter.QPKey
      value_conv: oidcmsg.storage.converter.JSON
    entity_statement:
      handler: oidcmsg.storage.abfile.AbstractFileSystem
      fdir: storage/expl/fed/{issuer}/entity_statement
      key_conv: oidcmsg.storage.converter.QPKey
      value_conv: oidcmsg.storage.converter.JSON
    config:
      handler: oidcmsg.storage.abfile.AbstractFileSystem
      fdir: storage/expl/fed/{issuer}/config
      key_conv: oidcmsg.storage.converter.QPKey
      value_conv: oidcmsg.storage.converter.JSON
  add_on:
    ssc:
      function: fedservice.op.add_on.ssc.add_ssc_support
      kwargs:
        ssc_dir: ssc

rp_db_conf: &db_conf
  abstract_storage_cls: oidcmsg.storage.extension.LabeledAbstractStorage
  keyjar:
    handler: oidcmsg.storage.abfile.AbstractFileSystem
    fdir: storage/expl/{issuer}/keyjar
    key_conv: oidcmsg.storage.converter.QPKey
    value_conv: cryptojwt.serialize.item.KeyIssuer
    label: keyjar
  default:
    handler: oidcmsg.storage.abfile.AbstractFileSystem
    fdir: storage/expl/{issuer}
    key_conv: oidcmsg.storage.converter.QPKey
    value_conv: oidcmsg.storage.converter.JSON
  state:
    handler: oidcmsg.storage.abfile.AbstractFileSystem
    fdir: storage/expl/{issuer}/state
    key_conv: oidcmsg.storage.converter.QPKey
    value_conv: oidcmsg.storage.converter.JSON

# The keys in this dictionary are the OPs short user friendly name
# not the issuer (iss) name.

clients:
  # The ones that support webfinger, OP discovery and client registration
  # This is the default, any client that is not listed here is expected to
  # support dynamic discovery and registration.
  "":
    client_preferences: *prefs
    redirect_uris: None
    services: *services
    db_conf: *db_conf
  # Supports OP information lookup but not client registration
  local:
    issuer: "https://{domain}:5000"
    client_preferences: *prefs
    redirect_uris: ["https://{domain}:{port}/authz_cb/local"]
    services: *services
    db_conf: *db_conf

webserver:
  port: *port
  server_cert: "certs/cert.pem"
  server_key: "certs/key.pem"
  ca_bundle: ''
  domain: *domain
