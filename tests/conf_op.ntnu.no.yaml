domain: &domain op.ntnu.no
server_name: '{domain}'
base_url: &base_url 'https://{domain}'

key_def: &key_def
  - type: RSA
    use:
      - sig
  - type: EC
    crv: "P-256"
    use:
      - sig
  - type: EC
    crv: "P-384"
    use:
      - sig

httpc_params:
  verify: False

oidc_keys: &oidc_keys
  private_path: "private/jwks.json"
  key_defs: *key_def
  public_path: 'static/jwks.json'
  read_only: False
  uri_path: 'static/jwks.json'


op:
  server_info:
    issuer: *base_url
    httpc_params:
      verify: false
    session_key:
      filename: 'private/session_jwk.json'
      type: OCT
      use: sig
    capabilities:
      subject_types_supported:
        - public
        - pairwise
      grant_types_supported:
        - authorization_code
        - implicit
        - urn:ietf:params:oauth:grant-type:jwt-bearer
        - refresh_token
    template_dir: templates
    token_handler_args:
      jwks_def:
        private_path: 'private/token_jwk.json'
        read_only: False
        key_defs:
          - type: oct
            bytes: 24
            use:
              - enc
            kid: code
          - type: oct
            bytes: 24
            use:
              - enc
            kid: refresh
      code:
        kwargs:
          lifetime: 600
      token:
        class: oidcop.token.jwt_token.JWTToken
        kwargs:
          lifetime: 3600
          add_claims:
            - email
            - email_verified
            - phone_number
            - phone_number_verified
          add_claim_by_scope: True
          aud:
            - https://example.org/appl
      refresh:
        kwargs:
          lifetime: 86400
      id_token:
        class: oidcop.token.id_token.IDToken
        kwargs:
          default_claims:
            email:
              essential: True
            email_verified:
              essential: True
    keys:
      *oidc_keys
    endpoint:
      webfinger:
        path: '.well-known/webfinger'
        class: oidcop.oidc.discovery.Discovery
      provider_info:
        path: ".well-known/openid-configuration"
        class: oidcop.oidc.provider_config.ProviderConfiguration
        kwargs:
          client_authn_method: null
      federation_info:
        path: ".well-known/openid-federation"
        class: fedservice.op.provider_config.ProviderConfiguration
        kwargs:
          client_authn_method: null
      federation_registration:
        path: registration
        class: fedservice.op.registration.Registration
        kwargs:
          client_authn_method: null
      registration_api:
        path: registration_api
        class: oidcop.oidc.read_registration.RegistrationRead
        kwargs:
          client_authn_method:
            - bearer_header
      introspection:
        path: introspection
        class: oidcop.oauth2.introspection.Introspection
        kwargs:
          client_authn_method:
            - client_secret_post
          release:
            - username
      authorization:
        path: authorization
        class: fedservice.op.authorization.Authorization
        kwargs:
          client_authn_method: null
          claims_parameter_supported: True
          request_parameter_supported: True
          request_uri_parameter_supported: True
          response_types_supported:
            - code
            - token
            - id_token
            - "code token"
            - "code id_token"
            - "id_token token"
            - "code id_token token"
            - none
          response_modes_supported:
            - query
            - fragment
            - form_post
      pushed_authorization:
          path: pushed_authorization
          class: fedservice.op.pushed_authorization.PushedAuthorization
          kwargs:
            client_authn_method:
              - client_secret_post
              - client_secret_basic
              - client_secret_jwt
              - private_key_jwt
      token:
        path: token
        class: oidcop.oidc.token.Token
        kwargs:
          client_authn_method:
            - client_secret_post
            - client_secret_basic
            - client_secret_jwt
            - private_key_jwt
      userinfo:
        path: userinfo
        class: oidcop.oidc.userinfo.UserInfo
        kwargs:
          claim_types_supported:
            - normal
            - aggregated
            - distributed
      end_session:
        path: session
        class: oidcop.oidc.session.Session
        kwargs:
          logout_verify_url: verify_logout
          post_logout_uri_path: post_logout
          signing_alg: "ES256"
          frontchannel_logout_supported: True
          frontchannel_logout_session_supported: True
          backchannel_logout_supported: True
          backchannel_logout_session_supported: True
          check_session_iframe: 'check_session_iframe'
    userinfo:
      class: oidcop.user_info.UserInfo
      kwargs:
        db_file: users.json
    authentication:
#      user:
#        acr: oidcendpoint.user_authn.authn_context.INTERNETPROTOCOLPASSWORD
#        class: oidcendpoint.user_authn.user.UserPassJinja2
#        kwargs:
#          verify_endpoint: 'verify/user'
#          template: user_pass.jinja2
#          db:
#            class: oidcendpoint.util.JSONDictDB
#            kwargs:
#              json_path: 'passwd.json'
#          page_header: "Testing log in"
#          submit_btn: "Get me in!"
#          user_label: "Nickname"
#          passwd_label: "Secret sauce"
      anon:
        acr: oidcop.user_authn.authn_context.UNSPECIFIED
        class: oidcop.user_authn.user.NoAuthn
        kwargs:
          user: diana
    cookie_dealer:
      class: oidcop.cookie.CookieDealer
      sign_jwk:
          filename: 'private/cookie_sign_jwk.json'
          type: OCT
          kid: cookie_sign_key_id
      kwargs:
        default_values:
          name: oidc_op
          domain: *domain
          path: /
          max_age: 3600
    login_hint2acrs:
      class: oidcop.login_hint.LoginHint2Acrs
      kwargs:
        scheme_map:
          email:
            - oidcop.user_authn.authn_context.INTERNETPROTOCOLPASSWORD
    federation:
      entity_id: *base_url
      keys:
        private_path: 'base_data/op.ntnu.no/op.ntnu.no/jwks.json'
        key_defs: *key_def
        public_path: 'base_data/ntnu.no/op.ntnu.no/jwks.json'
        read_only: false
      authority_hints: 'ntnu_authority_hints.json'
      trusted_roots: 'trusted_roots.json'
      priority: []
      entity_type: openid_provider
      opponent_entity_type: openid_relying_party
    claims_interface:
      class:
        function: oidcop.session.claims.ClaimsInterface
    # this adds PKCE support as mandatory - disable if needed
    add_on:
      pkce:
        function: oidcop.oidc.add_on.pkce.add_pkce_support
        kwargs:
          essential: false
          code_challenge_method:
            #plain
            - S256
            - S384
            - S512
      claims:
        function: oidcop.oidc.add_on.custom_scopes.add_custom_scopes
        kwargs:
          research_and_scholarship:
            - name
            - given_name
            - family_name
            - email
            - email_verified
            - sub
            - iss
            - eduperson_scoped_affiliation
      automatic_registration:
        function: fedservice.op.add_on.automatic_registration.add_support
        kwargs:
          new_id: False  # default False
          client_registration_authn_methods_supported:
            ar:
              - request_object
          where:
            - authorization

webserver:
  server_cert: 'certs/example.crt'
  server_key: 'certs/example.key'
  cert_chain: null
  domain: *domain
  debug: true
